package simpledb;
import java.util.*;

/**
 * The Join operator implements the relational join operation.
 */
public class Join extends AbstractDbIterator {
    DbIterator lChild;
    DbIterator rChild;
    JoinPredicate joinPredicate;
    TupleDesc td;
    private Tuple currentRightTuple;
    private int currentLeftCacheIndex;
    private boolean cacheInited;
    private ArrayList<Tuple> leftChildCache;

    /**
     * Constructor.  Accepts to children to join and the predicate
     * to join them on
     *
     * @param p The predicate to use to join the children
     * @param child1 Iterator for the left(outer) relation to join
     * @param child2 Iterator for the right(inner) relation to join
     */
    public Join(JoinPredicate p, DbIterator child1, DbIterator child2) {
        joinPredicate = p;
        cacheInited = false;
        currentLeftCacheIndex = -1;
        currentRightTuple = null;
        lChild = child1;
        rChild = child2;
        td = getTupleDesc();
        leftChildCache = new ArrayList<Tuple>();
    }

    /**
     * @see simpledb.TupleDesc#combine(TupleDesc, TupleDesc) for possible implementation logic.
     */
    public TupleDesc getTupleDesc() {
        return TupleDesc.combine(lChild.getTupleDesc(), rChild.getTupleDesc());
    }

    public void open()
        throws DbException, NoSuchElementException, TransactionAbortedException {
        lChild.open();
        rChild.open();
    }

    public void close() {
        lChild.close();
        rChild.close();
    }

    public void rewind() throws DbException, TransactionAbortedException {
        currentRightTuple = null;
        currentLeftCacheIndex = -1;
        lChild.rewind();
        rChild.rewind();
    }

    /**
     * Returns the next tuple generated by the join, or null if there are no more tuples.
     * Logically, this is the next tuple in r1 cross r2 that satisfies the join
     * predicate.  There are many possible implementations; the simplest is a
     * nested loops join.
     * <p>
     * Note that the tuples returned from this particular implementation of
     * Join are simply the concatenation of joining tuples from the left and
     * right relation. Therefore, if an equality predicate is used 
     * there will be two copies of the join attribute
     * in the results.  (Removing such duplicate columns can be done with an
     * additional projection operator if needed.)
     * <p>
     * For example, if one tuple is {1,2,3} and the other tuple is {1,5,6},
     * joined on equality of the first column, then this returns {1,2,3,1,5,6}.
     *
     * @return The next matching tuple.
     * @see JoinPredicate#filter
     */
//    protected Tuple readNext() throws TransactionAbortedException, DbException {
//        // Only consider about left-deep tree
//        // Cache left child
//        // Nested loop join
//        if (currentLeftCacheIndex == -1) {
//            // no cache available
//            if (currentLeftTuple == null && lChild.hasNext()) {
//                currentLeftTuple = lChild.next();
//            }
//            while (rChild.hasNext()) {
//                Tuple rightTuple = rChild.next();
//                if (joinPredicate.filter(currentLeftTuple, rightTuple)) {
//                    return constructJoinTuple(currentLeftTuple, rightTuple);
//                }
//            }
//            leftChildCache.add(currentLeftTuple);
//            while (lChild.hasNext()) {
//                currentLeftTuple = lChild.next();
//                rChild.rewind();
//                return readNext();
//            }
//            currentLeftCacheIndex = 0;
//        } else {
////            System.out.println("Get from cache");
//            // read left tuple from cache
//            while (rChild.hasNext()) {
//                Tuple rightTuple = rChild.next();
//                if (joinPredicate.filter(leftChildCache.get(currentLeftCacheIndex), rightTuple)) {
//                    return constructJoinTuple(leftChildCache.get(currentLeftCacheIndex), rightTuple);
//                }
//            }
//            if (currentLeftCacheIndex < leftChildCache.size() - 1) {
//                ++currentLeftCacheIndex;
//            }
//        }
//
//        return null;
//    }

    protected Tuple readNext() throws TransactionAbortedException, DbException {
        // Only consider about left-deep tree
        // Nested loop join

        // Cache left child
        if (!cacheInited) {
            while (lChild.hasNext()) {
                leftChildCache.add(lChild.next());
            }
            cacheInited = true;
        }

        if (currentRightTuple == null && rChild.hasNext()) {
            currentRightTuple = rChild.next();
        }

        while (currentLeftCacheIndex < leftChildCache.size() - 1) {
            ++currentLeftCacheIndex;
            if (joinPredicate.filter(leftChildCache.get(currentLeftCacheIndex), currentRightTuple)) {
                return constructJoinTuple(leftChildCache.get(currentLeftCacheIndex), currentRightTuple);
            }
        }
        while(rChild.hasNext()) {
            currentRightTuple = rChild.next();
            currentLeftCacheIndex = -1;
            return readNext();
        }
        return null;
    }

    private Tuple constructJoinTuple(Tuple leftTuple, Tuple rightTuple) {
        Tuple newTuple = new Tuple(td);
        int i = 0;
        for (; i < lChild.getTupleDesc().numFields(); ++i) {
            newTuple.setField(i, leftTuple.getField(i));
        }
        for (int j = 0; j < rChild.getTupleDesc().numFields(); ++j) {
            newTuple.setField(i + j, rightTuple.getField(j));
        }
        return newTuple;
    }
}
